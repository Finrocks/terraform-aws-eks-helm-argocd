---
fullnameOverride: "${fullname_override}"

global:
  logging:
    level: "debug"

  securityContext:
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999

%{ if role_enabled }
controller:
  serviceAccount:
    name: "${controller_sa_name}"
    annotations:
      eks.amazonaws.com/role-arn: "${controller_role_arn}"
      eks.amazonaws.com/sts-regional-endpoints: "${sts_regional_endpoints}"

server:
  serviceAccount:
    name: "${server_sa_name}"
    annotations:
      eks.amazonaws.com/role-arn: "${server_role_arn}"
      eks.amazonaws.com/sts-regional-endpoints: "${sts_regional_endpoints}"
%{ endif }

%{ if admin_password_setup  }
configs:
  secret:
    argocdServerAdminPassword: "${admin_password}"
%{ endif }    

%{ if ingress_enabled  }
server:
  ingress:
    enabled: true
    ## ingressClassName: "nginx"
    https: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
      kubernetes.io/tls-acme: "true"
      cert-manager.io/cluster-issuer: "${argocd_url}"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
      nginx.ingress.kubernetes.io/proxy-buffering: "off"
      nginx.ingress.kubernetes.io/server-snippet: |
        location = /robots.txt {
          add_header Content-Type text/plain;
          return 200 'User-agent: *\nDisallow: /\n';
        }
    path: /
    pathType: Prefix
    hosts:
      - ${argocd_url}
    tls:
      - secretName: ${argocd_url}
        hosts:
          - ${argocd_url}
%{ endif }   